# 配置分库名称
spring.shardingsphere.datasource.names=park0,park1,park2
#
#数据源
#
spring.shardingsphere.datasource.park0.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.park0.jdbc-url=jdbc:mysql://122.112.237.193:3344/ktcloud_dev_db01?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=GMT%2B8
spring.shardingsphere.datasource.park0.username=root
spring.shardingsphere.datasource.park0.password=cloud_test_Pa5ea1bae
#
spring.shardingsphere.datasource.park1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.park1.jdbc-url=jdbc:mysql://122.112.237.193:3344/ktcloud_dev_db02?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=GMT%2B8
spring.shardingsphere.datasource.park1.username=root
spring.shardingsphere.datasource.park1.password=cloud_test_Pa5ea1bae
#
spring.shardingsphere.datasource.park2.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.park2.jdbc-url=jdbc:mysql://122.112.237.193:3344/ktcloud_dev_db03?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=GMT%2B8
spring.shardingsphere.datasource.park2.username=root
spring.shardingsphere.datasource.park2.password=cloud_test_Pa5ea1bae
#
#默认分库配置
#
spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=lotCode
spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=park$->{lotCode % 3 -1}
#特定的表使用单独的分库策略
##由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持inline表达式。缺省表示使用已知数据源与逻辑表名称生成数据节点，用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况
spring.shardingsphere.sharding.tables.t_carema.actual-data-nodes=park$->{0..2}.t_carema
spring.shardingsphere.sharding.tables.t_carema.database-strategy.standard.sharding-column=lotCode
##精确分片算法类名称，用于=和IN。该类需实现PreciseShardingAlgorithm接口并提供无参数的构造器
spring.shardingsphere.sharding.tables.t_carema.database-strategy.standard.precise-algorithm-class-name=cn.blysin.demo.shardingjdbc.sharding.LotCodeShardingRule
##范围分片算法类名称，用于BETWEEN，可选。该类需实现RangeShardingAlgorithm接口并提供无参数的构造器
spring.shardingsphere.sharding.tables.t_carema.database-strategy.standard.range-algorithm-class-name=cn.blysin.demo.shardingjdbc.sharding.LotCodeShardingRule
#
#分表配置
#
#spring.shardingsphere.sharding.tables.t_carema.actual-data-nodes=park$->{0..2}.t_carema
#spring.shardingsphere.sharding.tables.t_carema.table-strategy.inline.sharding-column=lotCode
#spring.shardingsphere.sharding.tables.t_carema.table-strategy.inline.algorithm-expression=t_carema
##精确分片算法类名称，用于=和IN。该类需实现PreciseShardingAlgorithm接口并提供无参数的构造器
spring.shardingsphere.sharding.tables.t_carema.table-strategy.standard.precise-algorithm-class-name=cn.blysin.demo.shardingjdbc.sharding.LotCodeTableShardingRule
##范围分片算法类名称，用于BETWEEN，可选。该类需实现RangeShardingAlgorithm接口并提供无参数的构造器
spring.shardingsphere.sharding.tables.t_carema.table-strategy.standard.range-algorithm-class-name=cn.blysin.demo.shardingjdbc.sharding.LotCodeTableShardingRule

#
spring.shardingsphere.props.sql.show=true